
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AtendimentoEnvioTriagem(models.Model):
    data_envio_triagem = models.DateField(blank=True, null=True)
    horario_triagem = models.TimeField(blank=True, null=True)
    paciente_envio_triagem = models.ForeignKey('AtendimentoFichaDeAtendimento', models.DO_NOTHING)
    data_triagem_concluida = models.DateField(blank=True, null=True)
    triagem_concluida = models.CharField(max_length=1, blank=True, null=True)
    q1 = models.CharField(max_length=1, blank=True, null=True)
    q2 = models.CharField(max_length=1, blank=True, null=True)
    q3 = models.CharField(max_length=1, blank=True, null=True)
    q4 = models.CharField(max_length=1, blank=True, null=True)
    q5 = models.CharField(max_length=1, blank=True, null=True)
    q6 = models.CharField(max_length=1, blank=True, null=True)
    q7 = models.CharField(max_length=1, blank=True, null=True)
    q8 = models.CharField(max_length=1, blank=True, null=True)
    q9 = models.CharField(max_length=1, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Atendimento_envio_triagem'


class AtendimentoFichaDeAtendimento(models.Model):
    nome_social = models.CharField(max_length=40)
    data_nascimento = models.DateField()
    cep = models.CharField(db_column='CEP', max_length=9)  # Field name made lowercase.
    cpf = models.CharField(db_column='CPF', max_length=14)  # Field name made lowercase.
    rg = models.CharField(db_column='RG', max_length=13)  # Field name made lowercase.
    bairro = models.CharField(max_length=30)
    cidade = models.CharField(max_length=30)
    data_cadastro = models.DateField()
    estado = models.CharField(max_length=30)
    nacionalidade = models.CharField(max_length=30)
    nome_mae = models.CharField(max_length=40)
    responsavel = models.CharField(max_length=30, blank=True, null=True)
    rua = models.CharField(max_length=50)
    tel = models.CharField(max_length=16)
    sexo = models.ForeignKey('AtendimentoGeneroSexual', models.DO_NOTHING, blank=True, null=True)
    horario_cadastro = models.TimeField(blank=True, null=True)
    cartao_sus = models.CharField(max_length=15, blank=True, null=True)
    idade = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'Atendimento_ficha_de_atendimento'


class AtendimentoGeneroSexual(models.Model):
    nome_genero = models.CharField(max_length=40)

    class Meta:
        managed = False
        db_table = 'Atendimento_genero_sexual'


class MedicosCustomizeuser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    nome_completo = models.CharField(max_length=50)
    data_nascimento = models.DateField()

    class Meta:
        managed = False
        db_table = 'Medicos_customizeuser'


class MedicosCustomizeuserGroups(models.Model):
    customizeuser = models.ForeignKey(MedicosCustomizeuser, models.DO_NOTHING)
    group = models.ForeignKey('AuthGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Medicos_customizeuser_groups'
        unique_together = (('customizeuser', 'group'),)


class MedicosCustomizeuserUserPermissions(models.Model):
    customizeuser = models.ForeignKey(MedicosCustomizeuser, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'Medicos_customizeuser_user_permissions'
        unique_together = (('customizeuser', 'permission'),)


class MedicosMedicoAtendimento(models.Model):
    exame_fisico = models.TextField(blank=True, null=True)
    conduta = models.TextField(blank=True, null=True)
    medico_nome = models.CharField(max_length=40, blank=True, null=True)
    paciente_medico_atendimento = models.ForeignKey('TriagemTriagem', models.DO_NOTHING)
    diagnostico = models.CharField(db_column='Diagnostico', max_length=200, blank=True, null=True)  # Field name made lowercase. 
    classificacao_internacional_doenca_cid = models.CharField(db_column='classificacao_internacional_doenca_CID', max_length=50, blank=True, null=True)  # Field name made lowercase.
    historico_doenca_atual_hda = models.TextField(db_column='historico_doenca_atual_HDA', blank=True, null=True)  # Field name made lowercase.
    data_medico = models.DateField()
    hora_medico = models.TimeField(blank=True, null=True)
    tempo_espera_paciente = models.BigIntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Medicos_medico_atendimento'


class TriagemClassificaRisco(models.Model):

    class Meta:
        managed = False
        db_table = 'Triagem_classifica_risco'


class TriagemClassificaRiscoModel(models.Model):
    classifica_tipo = models.CharField(max_length=30)
    descri = models.TextField()

    class Meta:
        managed = False
        db_table = 'Triagem_classifica_risco_model'


class TriagemTriagem(models.Model):
    pressao_arterial_pa = models.CharField(db_column='pressao_arterial_PA', max_length=11)  # Field name made lowercase.
    frequencia_cardiaca_fc = models.CharField(db_column='frequencia_cardiaca_FC', max_length=7)  # Field name made lowercase.    
    frequencia_respiratoria_fr = models.CharField(db_column='frequencia_respiratoria_FR', max_length=6)  # Field name made lowercase.
    saturacao_de_oxigenio_spo2 = models.CharField(db_column='saturacao_de_oxigenio_SPO2', max_length=3)  # Field name made lowercase.
    hemoglicoteste_hgt = models.CharField(db_column='hemoglicoteste_HGT', max_length=9)  # Field name made lowercase.
    temperatura_temp = models.CharField(db_column='temperatura_TEMP', max_length=7)  # Field name made lowercase.
    peso = models.CharField(max_length=6)
    data_triagem = models.DateField()
    hora_triagem = models.TimeField(blank=True, null=True)
    classifica_tipo = models.ForeignKey(TriagemClassificaRiscoModel, models.DO_NOTHING, blank=True, null=True)
    paciente_triagem = models.ForeignKey(AtendimentoEnvioTriagem, models.DO_NOTHING)
    observacao = models.TextField()
    final_triagem = models.CharField(max_length=3, blank=True, null=True)
    final_triagem_time = models.DateField()
    preescrever_medicamento_medico = models.TextField(blank=True, null=True)
    enviar_ambulatorio = models.CharField(max_length=3)
    final_medico_atendimento = models.CharField(max_length=3, blank=True, null=True)
    atestado = models.TextField(blank=True, null=True)
    encaminhamento = models.TextField(blank=True, null=True)
    exames = models.TextField(blank=True, null=True)
    alergias = models.CharField(max_length=3)
    alergias_content = models.TextField(blank=True, null=True)
    nome_da_enfermeira = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'Triagem_triagem'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    first_name = models.CharField(max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'